
@{ 
    var chartJson1 = string.Empty;
    var chartJson2 = string.Empty;
    using (var database = new PHDS.Entities.Edmx.PinhuaEntities())
    {
        var result = database.view_发货_汇总_销售与加工.OrderByDescending(x => x.年).ThenByDescending(x => x.月).Take(24);
        chartJson1 = Newtonsoft.Json.JsonConvert.SerializeObject(result.Take(12).OrderBy(x=>x.年).ThenBy(x=>x.月));
        chartJson2 = Newtonsoft.Json.JsonConvert.SerializeObject(result.Skip(12).OrderBy(x => x.年).ThenBy(x => x.月));
    }
}

<div class="box box-primary">
    <div class="box-header with-border">

        <h3 class="box-title">销售报表</h3>

        <div class="box-tools pull-right">
            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                <i class="fa fa-minus"></i>
            </button>
            <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
        </div>
    </div>
    <div class="box-body">
        <div class="row">
            <div class="col-lg-6">
                <h5 class="box-title">年销售金额曲线</h5>
                <div class="chart">
                    <canvas id="areaChart" style="height:250px"></canvas>
                </div>
            </div>
            <div class="col-lg-6">
                <h5 class="box-title">年销售平方曲线</h5>
                <div class="chart">
                    <canvas id="areaChart2" style="height:250px"></canvas>
                </div>
            </div>
        </div>
    </div>
    <!-- /.box-body -->
</div>
<!-- /.box -->

@section scripts{
    @Scripts.Render("~/Content/AdminLTE/plugins/chartjs/include")

    <script>
        var xxx = @Html.Raw(chartJson1);
        var months = new Array
        for(var item in xxx)
        {
            months.push(xxx[item].月);
        }

        var squares = new Array
        for(var item in xxx)
        {
            squares.push(xxx[item].销售面积);
        }

        var amounts = new Array
        for(var item in xxx)
        {
            amounts.push(xxx[item].销售金额);
        }

        var xxx2 = @Html.Raw(chartJson2);
        var months2 = new Array
        for(var item in xxx2)
        {
            months2.push(xxx2[item].月);
        }

        var squares2 = new Array
        for(var item in xxx2)
        {
            squares2.push(xxx2[item].销售面积);
        }

        var amounts2 = new Array
        for(var item in xxx2)
        {
            amounts2.push(xxx2[item].销售金额);
        }

        $(function () {
            /* ChartJS
             * -------
             * Here we will create a few charts using ChartJS
             */

            //--------------
            //- AREA CHART -
            //--------------

            // Get context with jQuery - using jQuery's .get() method.
            var areaChartCanvas = $("#areaChart").get(0).getContext("2d");
            // This will get the first returned node in the jQuery collection.
            var areaChart = new Chart(areaChartCanvas);

            var areaChartData = {
                //labels: ["2016/01", "2016/02", "2016/03", "2016/04", "2016/05", "2016/06", "2016/07", "2016/08", "2016/09", "2016/10", "2016/11", "2016/12"],
                labels: months2,
                datasets: [
                  {
                      label: "2015",
                      fillColor: "rgba(210, 214, 222, 1)",
                      strokeColor: "rgba(210, 214, 222, 1)",
                      pointColor: "rgba(210, 214, 222, 1)",
                      pointStrokeColor: "#c1c7d1",
                      pointHighlightFill: "#fff",
                      pointHighlightStroke: "rgba(220,220,220,1)",
                      data: amounts2
                  },
                  {
                      label: "2016",
                      fillColor: "rgba(60,141,188,0.9)",
                      strokeColor: "rgba(60,141,188,0.8)",
                      pointColor: "#3b8bba",
                      pointStrokeColor: "rgba(60,141,188,1)",
                      pointHighlightFill: "#fff",
                      pointHighlightStroke: "rgba(60,141,188,1)",
                      data: amounts
                  }
                ]
            };

            // Get context with jQuery - using jQuery's .get() method.
            var areaChartCanvas2 = $("#areaChart2").get(0).getContext("2d");
            // This will get the first returned node in the jQuery collection.
            var areaChart2 = new Chart(areaChartCanvas2);

            var areaChartData2 = {
                //labels: ["2016/01", "2016/02", "2016/03", "2016/04", "2016/05", "2016/06", "2016/07", "2016/08", "2016/09", "2016/10", "2016/11", "2016/12"],
                labels: months2,
                datasets: [
                  {
                      label: "2015",
                      fillColor: "rgba(210, 214, 222, 1)",
                      strokeColor: "rgba(210, 214, 222, 1)",
                      pointColor: "rgba(210, 214, 222, 1)",
                      pointStrokeColor: "#c1c7d1",
                      pointHighlightFill: "#fff",
                      pointHighlightStroke: "rgba(220,220,220,1)",
                      data: squares2
                  },
                  {
                      label: "2016",
                      fillColor: "rgba(60,141,188,0.9)",
                      strokeColor: "rgba(60,141,188,0.8)",
                      pointColor: "#3b8bba",
                      pointStrokeColor: "rgba(60,141,188,1)",
                      pointHighlightFill: "#fff",
                      pointHighlightStroke: "rgba(60,141,188,1)",
                      data: squares
                  }
                ]
            };

            var areaChartOptions = {
                //Boolean - If we should show the scale at all
                showScale: true,
                //Boolean - Whether grid lines are shown across the chart
                scaleShowGridLines: true,
                //String - Colour of the grid lines
                scaleGridLineColor: "rgba(0,0,0,.05)",
                //Number - Width of the grid lines
                scaleGridLineWidth: 1,
                //Boolean - Whether to show horizontal lines (except X axis)
                scaleShowHorizontalLines: true,
                //Boolean - Whether to show vertical lines (except Y axis)
                scaleShowVerticalLines: true,
                //Boolean - Whether the line is curved between points
                bezierCurve: true,
                //Number - Tension of the bezier curve between points
                bezierCurveTension: 0.3,
                //Boolean - Whether to show a dot for each point
                pointDot: false,
                //Number - Radius of each point dot in pixels
                pointDotRadius: 4,
                //Number - Pixel width of point dot stroke
                pointDotStrokeWidth: 1,
                //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
                pointHitDetectionRadius: 20,
                //Boolean - Whether to show a stroke for datasets
                datasetStroke: true,
                //Number - Pixel width of dataset stroke
                datasetStrokeWidth: 2,
                //Boolean - Whether to fill the dataset with a color
                datasetFill: false,
                //String - A legend template
                legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>",
                //Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                maintainAspectRatio: true,
                //Boolean - whether to make the chart responsive to window resizing
                responsive: true
            };

            //Create the line chart
            areaChart.Line(areaChartData, areaChartOptions);
            areaChart2.Line(areaChartData2, areaChartOptions);
        })
    </script>
}